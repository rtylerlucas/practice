package chapter.five;

public class BonusBitManipulationPage25 {

	/*
	 * Right propogate the rightmost set bit to 1
	 * 01010000 --> 01011111
	 */
	public static long rightPropagate(long x){
		//We know x &~(x-1) returns a bitmask
		//of x's lowest bit set to 1. From there, we can iterate
		//xor with a bitmask of all 1s
		System.out.println(Long.toBinaryString(x));
		long lowestOne = x & ~(x-1);
		System.out.println("LowestOne: " + Long.toBinaryString(lowestOne));
		System.out.println("LowestOneShift: " + Long.toBinaryString(lowestOne>>>1));
		while(lowestOne != 0){
			x &= (lowestOne >>> 1);
		}
		System.out.println("Done: "+ Long.toBinaryString(x));
		return x;
	}
	
	/*
	 * Test if x is a power of two
	 */
//	public static boolean isPowerOfTwo(long x){
//		
//	}
//	
//	/*
//	 * Compute x modulo a power of two
//	 */
//	public static long computeModuloPowerTwo(long x){
//		
//	}
	
	public static void main(String[] args){
		BonusBitManipulationPage25.rightPropagate(64);
		//System.out.println("Right Propogate: " + BonusBitManipulationPage25.rightPropagate(64));
	}
}
