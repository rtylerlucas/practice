package chapter.twelve;

public class TweleveDotOne {
    /*
     * Given a sorted array, find first occurance of k
     * Find a k, then bounce left
     */
    public int findFirstOccurance(int k, int[] arr){



    }
    //recursive bSearch Impl
    public static int recursiveBSearch(int k, int[] arr, int s, int e){

        if(s >= e){
            return -1;
        }
        int middleIndex = e + (s - e) / 2;
        if(arr[middleIndex] == k){
            return middleIndex;
        } else if( arr[middleIndex] > k ){
            return recursiveBSearch(k, arr, s, middleIndex);
        }  else{
           return recursiveBSearch(k, arr, middleIndex + 1, e);
        }
    }
    //iterative bSearch Impl
    public static int iterativeBSearch(int k, int[] arr){
        int s = 0;
        int e = arr.length - 1;
        int m = e + (s - e) / 2;
        while(s <= e - 1){
            if(k < arr[m]){
                e = m;
            } else if(k > arr[m]){
                s = m+1;
            } else{
                return m;
            }
            m = e + (s-e) / 2;
        }
        return -1;
    }

    public static void main(String[] args){
        int[] arr = {1, 3, 4, 5, 6, 7, 8};
        System.out.println(recursiveBSearch(2, arr, 0, arr.length - 1));
//        System.out.println(iterativeBSearch(2, arr));
    }
}
