package algs.search;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;

import util.GraphNode;

/*
 * BreadthFirstSearch of an undirected graph
 * TODO, complete and test
 */
public class BreadthFirstSearch {
    
    private BreadthFirstSearch() {}
    
    public static GraphNode search(GraphNode start, int endData) {
        //Initialize an empty queue of visited nodes
        if (start.data==endData || start==null || endData==null){
            return start;
        }
        
        Queue<GraphNode> queue = new LinkedList<>();
        Set<GraphNode> visitedSet = new HashSet<>();
        queue.add(start);
        queue.addAll(start.edges);
        
        //add current node to the queue.
        //add each adjacent node to the queue, if it is not in visited Set.
        GraphNode curr;
        while(!queue.isEmpty()) {
            
            curr = queue.poll();
            
            if(!visitedSet.contains(curr)) {
                if(curr.data == endData){
                    return curr;
                }
                
                visitedSet.add(curr);
                
                for(GraphNode neighbor : curr.edges) {
                    
                    if(!visitedSet.contains(neighbor)) {
                        queue.add(neighbor);
                    }
                 
                }
            }
        }
        
        if(curr.data == endData){
            return curr;
        }
        return null;
    }

}
